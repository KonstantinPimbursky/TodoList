//
//  LoginViewController.swift
//  TodoList
//
//  Created by Konstantin Pimbursky on 05.03.2023.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ILoginViewController: AnyObject {
	func render(viewModel: LoginModels.ViewModel)
}

class LoginViewController: UIViewController, ILoginViewController {
	
	// MARK: - Public Properties
	
	private let interactor: ILoginInteractor
	
	// MARK: - Private Properties
	
	private lazy var loginTextField: UITextField = {
		let field = createTextField()
		field.placeholder = "Login"
		return field
	}()
	
	private lazy var passwordTextField: UITextField = {
		let field = createTextField()
		field.placeholder = "Password"
		return field
	}()
	
	private lazy var loginButton: UIButton = {
		let button = UIButton(type: .system)
		button.translatesAutoresizingMaskIntoConstraints = false
		button.backgroundColor = .systemBlue
		button.setTitleColor(.white, for: .normal)
		button.setTitle("Login", for: .normal)
		button.layer.cornerRadius = 6
		button.addTarget(self, action: #selector(loginButtonAction), for: .touchUpInside)
		return button
	}()
	
	private lazy var stackView: UIStackView = {
		let stack = UIStackView(arrangedSubviews: [loginTextField, passwordTextField, loginButton])
		stack.translatesAutoresizingMaskIntoConstraints = false
		stack.axis = .vertical
		stack.distribution = .equalSpacing
		stack.spacing = 25
		stack.alignment = .center
		return stack
	}()
	
	// MARK: - Initializers
	
	init(interactor: ILoginInteractor) {
		self.interactor = interactor
		super.init(nibName: nil, bundle: nil)
	}
	
	required init?(coder: NSCoder) {
		fatalError("init(coder:) has not been implemented")
	}
	
	// MARK: - Life Cycle
	
	override func viewDidLoad() {
		super.viewDidLoad()
		setupUI()
	}
	
	// MARK: Do something
	
	func render(viewModel: LoginModels.ViewModel) {
		if viewModel.success {
			dismiss(animated: true)
		} else {
			showErrorAlert()
		}
	}
	
	// MARK: - Private Methods
	
	@objc private func loginButtonAction() {
		guard
			let login = loginTextField.text,
			let password = passwordTextField.text
		else { return }
		let request = LoginModels.Request(login: login, password: password)
		interactor.login(request: request)
	}
	
	private func createTextField() -> UITextField {
		let textField = UITextField()
		textField.translatesAutoresizingMaskIntoConstraints = false
		textField.layer.borderColor = UIColor.black.cgColor
		textField.borderStyle = .roundedRect
		return textField
	}
	
	private func setupUI() {
		view.backgroundColor = .white
		view.addSubview(stackView)
		
		NSLayoutConstraint.activate([
			loginTextField.heightAnchor.constraint(equalToConstant: 34),
			loginTextField.widthAnchor.constraint(equalToConstant: 200),
			
			passwordTextField.heightAnchor.constraint(equalToConstant: 34),
			passwordTextField.widthAnchor.constraint(equalToConstant: 200),
			
			loginButton.heightAnchor.constraint(equalToConstant: 34),
			loginButton.widthAnchor.constraint(equalToConstant: 100),
			
			stackView.centerXAnchor.constraint(equalTo: view.safeAreaLayoutGuide.centerXAnchor),
			stackView.centerYAnchor.constraint(equalTo: view.safeAreaLayoutGuide.centerYAnchor, constant: -50)
		])
	}
	
	private func showErrorAlert() {
		let alert: UIAlertController
		alert = UIAlertController(
			title: "Error",
			message: "",
			preferredStyle: UIAlertController.Style.alert
		)
		let action = UIAlertAction(title: "Ok", style: .default)
		alert.addAction(action)
		present(alert, animated: true, completion: nil)
	}
}
